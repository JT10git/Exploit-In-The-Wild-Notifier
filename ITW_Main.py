import schedule
import time
import getopt, sys

import ITW_Manager

from colorama import Fore

class Main:
    '''This class configures all the settings to run the program and sequences it'''
    def __init__(self, hours=0, minutes=0, rss="https://github.com/gmatuz/inthewilddb/raw/master/rss.xml", refer="vuln_ref.data", server="localhost", port="1025", frommail="test@test.com", tomail="test@test.com", password=None):
        print(Fore.CYAN, "[-] Configuring Timer", Fore.RESET)
        self.hours = hours
        self.minutes = minutes
        self.mgr = ITW_Manager.Manager(rss=rss, refer=refer, server=server, port=port, frommail=frommail, tomail=tomail, password=password)
    
    def run(self):
        print(Fore.CYAN, "\n[-] Preparing CVE IWT check\n", Fore.RESET)
        self.mgr.connect()
        self.mgr.getref()
        # self.mgr.ref = self.mgr.itw.entries[-5].title # Testing Code
        self.mgr.check()
        self.mgr.notify()
        print(Fore.CYAN, "\n[-] Completed CVE IWT check\n", Fore.RESET)
        
    def settimer(self):
        if self.hours > 0: 
            schedule.every(self.hours).hours.do(self.run)
            print(Fore.LIGHTGREEN_EX, "\n[!] Will Run Every %d Hours\n" % (self.hours), Fore.RESET)
        elif self.minutes > 0:
            schedule.every(self.minutes).minutes.do(self.run)
            print(Fore.LIGHTGREEN_EX, "\n[!] Will Run Every %d Minutes\n" % (self.minutes), Fore.RESET)
        else: return
        try:
            while True:
                schedule.run_pending()
                time.sleep(1)
        except KeyboardInterrupt:
            print(Fore.YELLOW, "[-] Keyboard Interrupt detected: Closing program", Fore.RESET)
            exit(0)
        except:
            print(Fore.RED, "[x] Unknown error has occured", Fore.RESET)
            exit(0)
        
    def __del__(self):
        print(Fore.YELLOW, "[!] WARNING: Script is not longer active", Fore.RESET)
        
if __name__ == "__main__":
    hours=0
    minutes=0
    rss="https://github.com/gmatuz/inthewilddb/raw/master/rss.xml"
    refer="vuln_ref.data"
    server="localhost"
    port="1025"
    frommail="test@test.com"
    tomail="test@test.com"
    password=None
    argList = sys.argv[1:]
    options = "o:m:r:f:s:p:e:t:p:h"
    loptions = ["hours=", "minutes=", "rss=", "refer=", "server=", "port=", "from=", "to=", "pass=", "help"]
    try:
        arguments, values = getopt.getopt(argList, options, loptions)
        for currentArgument, currentValue in arguments:
            if currentArgument in ("-o", "--hours"):
                hours = int(currentValue)
            elif currentArgument in ("-m", "--minutes"):
                minutes = int(currentValue)
            elif currentArgument in ("-r", "--rss"):
                rss = currentValue
            elif currentArgument in ("-f", "--refer"):
                refer = currentValue
            elif currentArgument in ("-s", "--server"):
                server = currentValue
            elif currentArgument in ("-p", "--port"):
                port = currentValue
            elif currentArgument in ("-e", "--from"):
                frommail = currentValue
            elif currentArgument in ("-t", "--to"):
                tomail = currentValue
            elif currentArgument in ("-p", "--pass"):
                password = currentValue
            elif currentArgument in ("-h", "--help"):
                print("[*] No help documentation")
                exit(0)
    except getopt.error as err:
        print(Fore.RED, "[x] Argument Parse error has occured", Fore.RESET)
        exit(0)
    main = Main(hours=hours, minutes=minutes, rss=rss, refer=refer, server=server, port=port, frommail=frommail, tomail=tomail, password=password)
    print(Fore.GREEN, "[+] Initial Run", Fore.RESET)
    main.run()
    main.settimer()