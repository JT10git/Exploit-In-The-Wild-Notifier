import feedparser
import pickle

import ITW_Alerter

from colorama import Fore

class Manager:
    '''This class allows us to find CVEs in the wild by using a site RSS feed'''
    def __init__(self, rss="https://github.com/gmatuz/inthewilddb/raw/master/rss.xml", refer="vuln_ref.data", server="localhost", port="1025", frommail="test@test.com", tomail="test@test.com", password=None):
        print(Fore.CYAN, "[-] Configuring Manager", Fore.RESET)
        self.itw_rss = rss
        self.reference_file = refer
        self.alerts = 0
        # For Alerter
        self.server = server
        self.port = port
        self.frommail = frommail
        self.tomail = tomail
        self.password = password
        
    def connect(self):
        try:
            print(Fore.GREEN, "[+] Connecting to RSS", Fore.RESET)
            self.itw = feedparser.parse(self.itw_rss)
            if self.itw is None:
                raise Exception("Bad Connection")
        except:
            print(Fore.RED, "[x] Connection Error: Unable to connect to RSS feed link", Fore.RESET)
            exit(0)
            
    def getref(self):
        try:
            print(Fore.GREEN, "[+] Getting Reference", Fore.RESET)
            rf = open(self.reference_file, "rb")
            self.ref = pickle.load(rf)
        except:
            print(Fore.YELLOW, "[-] Reference does not exist", Fore.RESET)
            self.setref()
            exit(0)
            
    def setref(self, refindex=-1):
        try:
            print(Fore.GREEN, "[+] Setting New Reference", Fore.RESET)
            rf = open(self.reference_file, "wb")
            self.ref = self.itw.entries[refindex].title
            pickle.dump(self.ref, rf)
        except:
            print(Fore.RED, "[x] Error saving reference file", Fore.RESET)
            exit(0)
            
    def check(self):
        try:
            if self.itw.entries[-1].title == self.ref:
                print(Fore.YELLOW, "[-] No new CVEs In The Wild", Fore.RESET)
            else:
                ref_index = 1
                for i in range(2, len(self.itw.entries)):
                    x = 0 - i
                    if self.itw.entries[x].title == self.ref:
                        ref_index = i
                        break
                print(Fore.YELLOW, "[-] %d New CVEs found in the wild" % (ref_index - 1), Fore.RESET)
                self.alerts = 1 - ref_index
        except:
            print(Fore.RED, "[x] Error checking references", Fore.RESET)
            exit(0)
    
    def notify(self):
        if self.alerts == 0:
            return
        alr = ITW_Alerter.Alert(server=self.server, port=self.port, frommail=self.frommail, tomail=self.tomail, password=self.password)
        alr.econnect()
        try:
            count = 1
            while 0 > self.alerts:
                print(Fore.MAGENTA, "\tCVE '%d' :" % (count), Fore.RESET)
                print(Fore.BLUE, "\tTitle: ", self.itw.entries[self.alerts].title, Fore.RESET)
                print(Fore.BLUE, "\tLink: ", self.itw.entries[self.alerts].link, Fore.RESET)
                print(Fore.BLUE, "\tPublish Date: ", self.itw.entries[self.alerts].published[:10], Fore.RESET)
                alr.sendalert(self.itw.entries[self.alerts])
                self.alerts += 1
                count += 1
        except:
            print(Fore.RED, "[x] Error alerting new CVEs", Fore.RESET)
            exit(0)
        self.setref()
        
    def __del__(self):
        print(Fore.GREEN, "[+] Closing Manager", Fore.RESET)

if(__name__ == "__main__"):
    main = Manager()
    main.connect()
    # main.getref()
    main.ref = main.itw.entries[-5].title # Testing Code
    main.check()
    main.notify()